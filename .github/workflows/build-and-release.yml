name: Build and Release TON OS SE binaries

on:
  push:
    paths-ignore:
      - "README.md"
      - ".github/workflows/node-release-detection.yml"
    tags:
      - "*"
  pull_request:
    paths-ignore:
      - "README.md"
      - ".github/workflows/node-release-detection.yml"
  workflow_dispatch:
    inputs:
      tonos-se-version:
        description: 'TON OS SE version'
        required: true
env:
  TONOS_SE_REPO_OWNER: tonlabs
  TONOS_SE_REPO_NAME: tonos-se
  TON_Q_SERVER_REPO_OWNER: tonlabs
  TON_Q_SERVER_REPO_NAME: ton-q-server
  ARANGODB_VERSION: 3.7.9
  NGINX_VERSION: 1.19.7  
  TONOS_SE_DEFAULT_VERSION: 0.28.5

defaults:
  run:
    shell: bash

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runner-matrix: ${{ steps.set-matrix.outputs.runner-matrix }}
      q-server-version: ${{ steps.set-matrix.outputs.q-server-version }}
      tonos-se-version: ${{ steps.set-matrix.outputs.tonos-se-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Get TONOS SE Releases and Set matrix
        id: set-matrix
        uses: actions/github-script@v3
        with:
          script: |
            const runners = ['ubuntu-18.04', 'macos-10.15', 'windows-2019'];

            const { data: { tag_name: latestQServerRelease } } = await github.repos.getLatestRelease(
              {
                owner: '${{ env.TON_Q_SERVER_REPO_OWNER }}', 
                repo: '${{ env.TON_Q_SERVER_REPO_NAME }}'
              });

            let tonosSeVersion;
            if ('${{ github.event.inputs.tonos-se-version }}') {
              tonosSeVersion = '${{ github.event.inputs.tonos-se-version }}';
            } else if ('${{ github.ref }}'.startsWith('refs/tags/')) {
              tonosSeVersion = '${{ github.ref }}';            
            } else {
              tonosSeVersion = '${{ env.TONOS_SE_DEFAULT_VERSION }}';
            }

            core.setOutput('runner-matrix', JSON.stringify({include: runners.map(runner=>({'runs-on': runner}))}));
            core.setOutput('q-server-version', latestQServerRelease);            
            core.setOutput('tonos-se-version', tonosSeVersion);

  build-node-se:
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}    
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout tonos-se
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TONOS_SE_REPO_OWNER }}/${{ env.TONOS_SE_REPO_NAME }}"
          ref: ${{ needs.prepare.outputs.tonos-se-version }}

      - name: ⚡ Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.runs-on }}-cargoregistry-${{ hashFiles('ton-node-se/**/Cargo.toml') }}
          restore-keys: ${{ matrix.runs-on }}-cargoregistry-

      # - name: 🔨 Generate Cargo.lock
      #   working-directory: ton-node-se
      #   env:
      #     CARGO_TERM_COLOR: always
      #   run: cargo generate-lockfile

      # - name: ⚡ Cache target
      #   uses: actions/cache@v2
      #   with:
      #     path: ton-node-se/target
      #     key: ${{ matrix.runs-on }}-cargotarget-${{ hashFiles('ton-node-se/**/Cargo.lock') }}

      - name: 🔨 Build
        working-directory: ton-node-se
        env:
          CARGO_TERM_COLOR: always
        run: cargo build --release

      - name: 🔨 TAR node binaries
        run: |
          mkdir -p ton-node
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            cp ton-node-se/target/release/ton_node_startup.exe ton-node
          else 
            cp ton-node-se/target/release/ton_node_startup ton-node
            chmod +x ton-node/ton_node_startup
          fi
          tar -cvf ton-node-${{ runner.os }}.tar ton-node

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ton-node-${{ runner.os }}
          path: ton-node-${{ runner.os }}.tar
          if-no-files-found: error

  build-arango:
    strategy:
      matrix:
        os: [Linux, Windows, macOS]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2

      - name: Load parameters
        uses: actions/github-script@v3.1.0
        with:
          script: |
            const config = require(`${process.env.GITHUB_WORKSPACE}/config.arangodb.js`)(`${process.env.ARANGODB_VERSION}`)
            core.exportVariable('PATH_IN_ARCHIVE', config["${{ matrix.os }}"].pathInArchive)
            core.exportVariable('URL', config["${{ matrix.os }}"].url)

      - name: Download and unpack
        uses: nrukavkov/configurator@v0.0.8
        with:
          name: arango
          url: ${{env.URL}}
          pathInArchive: ${{env.PATH_IN_ARCHIVE}}

      - name: TAR arangodb binaries
        run: |
          mv .configurator/arango ./arango
          mkdir -p arango/var/lib/arangodb3-apps
          mkdir -p arango/var/lib/arangodb3          
          tar -cvf arango-${{ matrix.os }}.tar arango

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: arango-${{ matrix.os }}
          path: arango-${{ matrix.os }}.tar
          if-no-files-found: error

  build-q-server:
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2
        with:
          path: q-server
          repository: ${{ env.TON_Q_SERVER_REPO_OWNER }}/${{ env.TON_Q_SERVER_REPO_NAME }}
          ref: ${{ needs.prepare.outputs.q-server-version }}

      - name: NPM Install
        working-directory: q-server
        run: npm install

      - name: typescript build
        working-directory: q-server
        run: npm run tsc

      - name: NPM Install Production Only
        working-directory: q-server
        run: |
          rm -r node_modules/
          npm install --production

      - name: TAR q-server binaries
        run: tar -cvf q-server-${{ runner.os }}.tar q-server/dist/ q-server/res/ q-server/node_modules/ q-server/index.js q-server/package.json

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: q-server-${{ runner.os }}
          path: q-server-${{ runner.os }}.tar
          if-no-files-found: error

  build-nginx:
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Download nginx
        working-directory: nginx
        run: |
          npm install
          npm run download
          cp mime.types nginx/mime.types
      - run: tar -C nginx -cvf nginx-${{ runner.os }}.tar nginx
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: nginx-${{ runner.os }}
          path: nginx-${{ runner.os }}.tar
          if-no-files-found: error

  build-configs:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tonos-se
        uses: actions/checkout@v2
        with:
          path: tonos-se
          repository: "tonlabs/tonos-se"
          ref: ${{ needs.prepare.outputs.tonos-se-version }}

      - name: Copy additional files from tonos-se repos
        run: |
          mkdir -p configs          
          cp -r tonos-se/docker/* configs/
          cd configs               
          rm Dockerfile
          rm Procfile
          find . -name "entrypoint" -type f -delete
          mkdir -p nginx
          mv nginx.conf.d nginx/nginx.conf
          tar -cvf ../configs.tar `ls -A`

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: configs
          path: configs.tar
          if-no-files-found: error

  publish-release-draft:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs:
      - prepare
      - build-node-se
      - build-arango
      - build-q-server
      - build-nginx
      - build-configs
    runs-on: ubuntu-latest
    steps:
      - name: 🎣 Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: "Merge tar files"
        working-directory: artifacts
        run: |
          declare -a osArray=("Linux" "Windows" "macOS")          
          for os in "${osArray[@]}"
          do
            echo "Creating archive tonos-se-$os.tar.gz"
            tar --concatenate --file=tonos-se-$os.tar ton-node-$os/ton-node-$os.tar
            tar --concatenate --file=tonos-se-$os.tar arango-$os/arango-$os.tar              
            tar --concatenate --file=tonos-se-$os.tar nginx-$os/nginx-$os.tar
            tar --concatenate --file=tonos-se-$os.tar q-server-$os/q-server-$os.tar
            tar --concatenate --file=tonos-se-$os.tar configs/configs.tar
            gzip -1 tonos-se-$os.tar
            cat tonos-se-$os.tar.gz | sha256sum | awk '{print $1}' > tonos-se-$os.tar.gz.sha256
          done

      - name: Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true          
          artifacts: "./artifacts/tonos-se-*.tar.gz*"
          tag: ${{ needs.prepare.outputs.tonos-se-version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
