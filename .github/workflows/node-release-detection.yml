name: New TON OS SE release detection

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  TONOS_SE_REPO_OWNER: tonlabs
  TONOS_SE_REPO_NAME: tonos-se

jobs:
  check-new-releases:
    runs-on: ubuntu-latest
    outputs:
      remote-releases: ${{ steps.get-releases.outputs.remote-releases }}
      local-releases: ${{ steps.get-releases.outputs.local-releases }}
      new-releases: ${{ steps.get-releases.outputs.new-releases }}
    steps:
      - uses: actions/checkout@v2
      - name: Get remote and local releases
        id: get-releases
        uses: actions/github-script@v3
        with:
          script: |
            var { data } = await github.repos.listReleases({
              owner: '${{ env.TONOS_SE_REPO_OWNER }}',
              repo: '${{ env.TONOS_SE_REPO_NAME }}',
            });
            var remoteReleases = data.map(release=>String(release.tag_name)).reverse();

            var localReleases = require(`${process.env.GITHUB_WORKSPACE}/tonos-se-releases.json`);

            core.setOutput('remote-releases', JSON.stringify(remoteReleases));
            core.setOutput('local-releases', JSON.stringify(localReleases));
            core.setOutput('new-releases', JSON.stringify(remoteReleases.filter(r=>!localReleases.includes(r))))

  push-to-local-releases:
    needs: check-new-releases
    if: ${{ needs.check-new-releases.outputs.new-releases != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo 'Remote releases: ${{ needs.check-new-releases.outputs.remote-releases }}'
          echo 'Local releases: ${{ needs.check-new-releases.outputs.local-releases }}'
          echo 'New releases: ${{ needs.check-new-releases.outputs.new-releases }}'
      - uses: actions/checkout@v2
        with:
          token: ${{secrets.PAT}}
      - run: echo '${{ needs.check-new-releases.outputs.remote-releases }}' > tonos-se-releases.json
      - name: Commit tonos-se-releases.json
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com
          git commit -a -m "Add new releases: ${{ needs.check-new-releases.outputs.new-releases }}"
          git push
