name: Main workflow

on: [ push ]  

env:
  TONOS_SE_VERSION: 0.25.0
  ARANGODB_VERSION: 3.7.9
  TON_Q_SERVER_VERSION: 0.34.0
jobs:
  build-node:
    name: Build Node SE ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout tonos-se
        uses: actions/checkout@v2
        with:
          repository: 'tonlabs/tonos-se'
          ref: ${{ env.TONOS_SE_VERSION }}
          
      - name: ⚡ Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: |
            ${{ runner.os }}-cargoregistry-${{ hashFiles('ton-node-se/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargoregistry-
            
      - name: 🔨 Generate Cargo.lock
        working-directory: ton-node-se
        env:
          CARGO_TERM_COLOR: always
        run: cargo generate-lockfile
          
      - name: ⚡ Cache target
        uses: actions/cache@v2
        with:
          path: |
            ton-node-se/target
          key: |
            ${{ runner.os }}-cargotarget-${{ hashFiles('ton-node-se/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargotarget-

      - name: 🔨 Build
        working-directory: ton-node-se
        env:
          CARGO_TERM_COLOR: always
        run: cargo build --release

      - name: 🔨 TAR node binaries
        run: |
          mkdir -p ton-node
          if [[ "${{ runner.os }}" == 'Windows' ]]; then
            cp ton-node-se/target/release/ton_node_startup.exe ton-node
          else 
            cp ton-node-se/target/release/ton_node_startup ton-node
            chmod +x node/ton_node_startup
          fi
          tar -cvf node-${{ matrix.os }}.tar ton-node

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ton-node-${{ matrix.os }}
          path: ton-node-${{ matrix.os }}.tar
          if-no-files-found: error
          
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ton-node-${{ matrix.os }}
          path: ton-node-${{ matrix.os }}.tar
          if-no-files-found: error

  build-arango:
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2

      - name: Load parameters
        uses: actions/github-script@v3.1.0
        with:
          script: |
            const config = require(`${process.env.GITHUB_WORKSPACE}/config.arangodb.js`)(`${process.env.ARANGODB_VERSION}`)
            core.exportVariable('PATH_IN_ARCHIVE', config["${{ matrix.os }}"].pathInArchive)
            core.exportVariable('URL', config["${{ matrix.os }}"].url)

      - name: Download and unpack
        uses: nrukavkov/configurator@v0.0.8
        with:
          name: arango
          url: ${{env.URL}}
          pathInArchive: ${{env.PATH_IN_ARCHIVE}}

      - name: TAR arangodb binaries
        run: |
          mv .configurator/arango ./arango
          mkdir -p arango/var/lib/arangodb3-apps
          mkdir -p arango/var/lib/arangodb3          
          tar -cvf arango-${{ matrix.os }}.tar arango
      
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: arango-${{ matrix.os }}
          path: arango-${{ matrix.os }}.tar
          if-no-files-found: error
          
  build-q-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2
        with:
          path: q-server
          repository: tonlabs/ton-q-server
          ref: ${{ env.TON_Q_SERVER_VERSION }}  
  
      - name: TAR arangodb binaries
        run: |        
          tar -cvf q-server.tar q-server/dist
  
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: q-server
          path: q-server.tar
          if-no-files-found: error

  prepare-artifacts:
    needs:
      - build-node
      - build-arango
      - build-q-server 
    runs-on: ubuntu-latest
    steps:
      - name: 🎣 Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
          
      - name: Checkout tonos-se
        uses: actions/checkout@v2
        with:
          path: tonos-se
          repository: 'tonlabs/tonos-se'
          ref: ${{ env.TONOS_SE_VERSION }}

      - name: Copy additional files from tonos-se repos
        run: |
          mkdir -p configs
          cp -r tonos-se/docker configs/
          tar -cvf config.tar configs
          
      - name: 'Merge tar files'
        working-directory: artifacts
        run: |
          declare -a arr=("ubuntu" "windows" "macos")
          for i in "${arr[@]}"
          do
            echo "Creating archive release-$i.tar.gz"
            ls **/arango-$i.tar
            ls **/node-$i.tar
            tar --concatenate --file=release-$i.tar arango-$i/arango-$i.tar
            tar --concatenate --file=release-$i.tar ton-node-$i/ton-node-$i.tar
            tar --concatenate --file=release-$i.tar q-server/q-server.tar
            tar --concatenate --file=release-$i.tar ${{ github.workspace }}/config.tar
            gzip release-$i.tar
          done
           
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:          
          name: release
          path: artifacts/release-*.tar.gz
          if-no-files-found: error

  publish:
    name: Create Release
    runs-on: ubuntu-latest  
    needs:
      - prepare-artifacts
    steps: 
      - name: 🎣 Download release artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
          name: release
   
      - name: 🍸 Publish release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.TONOS_SE_VERSION }}"
          prerelease: false
          title: "Node SE binaries ${{ env.TONOS_SE_VERSION }}"
          files: artifacts/**/release-*.tar.gz