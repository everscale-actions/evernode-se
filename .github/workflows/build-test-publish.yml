name: Build, Test and Publish TON OS SE binaries

concurrency:
  group: "only-one-release"
  cancel-in-progress: false

on:
  push:
    tags:
      - "*"
    paths-ignore:
      - "README.md"
  pull_request:
    types: [labeled]
env:
  EVERNODE_SE_OWNER: tonlabs
  EVERNODE_SE_REPO: evernode-se
  TON_Q_SERVER_REPO_OWNER: tonlabs
  TON_Q_SERVER_REPO_NAME: ton-q-server
  EVER_SDK_JS_OWNER: tonlabs
  EVER_SDK_JS_REPO: ever-sdk-js
  EVER_SDK_JS_REF: 1.30.1
  BUILD_TON_NODE_REPO: everscale-actions/build-evernode-se
  ARANGODB_VERSION: 3.7.9
  NGINX_VERSION: 1.19.7
  DEFAULT_PORTS: '{"nginx":8080,"arango":8529,"qserver":4000,"node":40301,"requests":3000}'
  CUSTOM_PORTS: '{"nginx":8881,"arango":8882,"qserver":8883,"node":8884,"requests":8885}'

defaults:
  run:
    shell: bash

jobs:
  labels:
    name: Label taking off
    if: github.event.label.name == 'start_tests'
    runs-on: ubuntu-latest
    steps:
      - name: Take off label
        uses: actions/github-script@v6.0.0
        with:
          script: "github.issues.removeLabel({...context.issue, name: '${{ github.event.label.name }}' })"

  prepare:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      runner-matrix: ${{ steps.set-matrix.outputs.runner-matrix }}
      q-server-version: ${{ steps.set-matrix.outputs.q-server-version }}
      release-tag: ${{ steps.set-matrix.outputs.release-tag }}
      evernode-se-version: ${{ steps.set-matrix.outputs.evernode-se-version }}
      package-name: ${{ steps.set-matrix.outputs.package-name }}
      major-tag: ${{ steps.set-matrix.outputs.major-tag }}
      minor-tag: ${{ steps.set-matrix.outputs.minor-tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Get Evernode SE Releases and Set matrix
        id: set-matrix
        uses: actions/github-script@v6.0.0
        with:
          script: |
            const runners = ['ubuntu-18.04', 'macos-10.15', 'windows-2019'];            
            const { data: { tag_name: latestQServerRelease } } = await github.rest.repos.getLatestRelease({owner: '${{ env.TON_Q_SERVER_REPO_OWNER }}', repo: '${{ env.TON_Q_SERVER_REPO_NAME }}'});
            const { version: releaseTag, name: packageName } = require(`${process.env.GITHUB_WORKSPACE}/package.json`);

            const majorTag = releaseTag.split('.', 1)[0];
            const minorTag = releaseTag.split('.', 2).join('.');           

            core.setOutput('runner-matrix', JSON.stringify({include: runners.map(runner=>({'runs-on': runner}))}));
            core.setOutput('q-server-version', latestQServerRelease);            
            core.setOutput('release-tag', releaseTag);
            core.setOutput('evernode-se-version', releaseTag.split('-')[0]);
            core.setOutput('major-tag', majorTag);
            core.setOutput('minor-tag', minorTag);
            core.setOutput('package-name', packageName);
  build-node-se:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Linux, Windows, macOS]
    steps:
      - name: Download binaries and tar node se startup bin
        run: |
          version=${{ needs.prepare.outputs.evernode-se-version }}
          os=${{ matrix.os }}
          wget https://github.com/${{ env.BUILD_TON_NODE_REPO }}/releases/download/$version/ton-node-$os-$version.tar.gz
          tar -xvzf ton-node-$os-$version.tar.gz
          mkdir -p ton-node
          if [[ $os == 'Windows' ]]; then
            mv ton_node_startup.exe ton-node/
          else
            mv ton_node_startup ton-node/
            chmod +x ton-node/ton_node_startup
          fi
          tar -cvf ton-node-$os.tar ton-node

      - name: 📚 Publish artifact ${{ matrix.os }}
        uses: actions/upload-artifact@v2
        with:
          name: ton-node-${{ matrix.os }}
          path: ton-node-${{ matrix.os }}.tar
          if-no-files-found: error

  build-arango:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    strategy:
      matrix:
        os: [Linux, Windows, macOS]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2

      - name: Load parameters
        uses: actions/github-script@v6.0.0
        with:
          script: |
            const { default: getConfig } = await import('${{ github.workspace }}/arangodb/config.js')
            const config = getConfig(`${process.env.ARANGODB_VERSION}`)
            core.exportVariable('PATH_IN_ARCHIVE', config["${{ matrix.os }}"].pathInArchive)
            core.exportVariable('URL', config["${{ matrix.os }}"].url)

      - name: Download and unpack
        uses: nrukavkov/configurator@v0.0.8
        with:
          name: arango
          url: ${{env.URL}}
          pathInArchive: ${{env.PATH_IN_ARCHIVE}}

      - name: TAR arangodb binaries
        run: |
          mv .configurator/arango ./arango
          mkdir -p arango/var/lib/arangodb3-apps
          mkdir -p arango/var/lib/arangodb3          
          tar -cvf arango-${{ matrix.os }}.tar arango

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: arango-${{ matrix.os }}
          path: arango-${{ matrix.os }}.tar
          if-no-files-found: error

  build-q-server:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2
        with:
          path: q-server
          repository: ${{ env.TON_Q_SERVER_REPO_OWNER }}/${{ env.TON_Q_SERVER_REPO_NAME }}
          ref: ${{ needs.prepare.outputs.q-server-version }}

      - name: NPM Install
        working-directory: q-server
        run: npm install

      - name: typescript build
        working-directory: q-server
        run: npm run tsc

      - name: NPM Install Production Only
        working-directory: q-server
        run: |
          rm -r node_modules/
          npm install --production

      - name: TAR q-server binaries
        run: tar -cvf q-server-${{ runner.os }}.tar q-server/dist/ q-server/res/ q-server/node_modules/ q-server/index.js q-server/package.json

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: q-server-${{ runner.os }}
          path: q-server-${{ runner.os }}.tar
          if-no-files-found: error

  build-nginx:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs: prepare
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Download nginx
        working-directory: nginx
        run: |
          npm install
          npm run download
          cp mime.types nginx/mime.types
      - run: tar -C nginx -cvf nginx-${{ runner.os }}.tar nginx
      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: nginx-${{ runner.os }}
          path: nginx-${{ runner.os }}.tar
          if-no-files-found: error

  build-configs:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout evernode-se
        uses: actions/checkout@v2
        with:
          path: evernode-se
          repository: "${{ env.EVERNODE_SE_OWNER }}/${{ env.EVERNODE_SE_REPO }}"
          ref: ${{ needs.prepare.outputs.evernode-se-version }}

      - name: Copy additional files from evernode-se repos
        run: |
          mkdir -p configs          
          cp -r evernode-se/docker/* configs/
          cd configs               
          rm Dockerfile
          rm Procfile
          find . -name "entrypoint" -type f -delete
          mkdir -p nginx
          mv nginx.conf.d nginx/nginx.conf
          tar -cvf ../configs.tar `ls -A`

      - name: 📚 Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: configs
          path: configs.tar
          if-no-files-found: error

  publish-release:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs:
      - prepare
      - build-node-se
      - build-arango
      - build-q-server
      - build-nginx
      - build-configs
    runs-on: ubuntu-latest
    steps:
      - name: 🎣 Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: "Merge tar files"
        working-directory: artifacts
        run: |
          releaseTag=${{ needs.prepare.outputs.release-tag }}    
          declare -a osArray=("Linux" "Windows" "macOS")          
          for os in "${osArray[@]}"
          do
            tarFile=evernode-se-$os-$releaseTag.tar
            echo "Creating archive evernode-se-$os.tar.gz"
            tar --concatenate --file=$tarFile ton-node-$os/ton-node-$os.tar
            tar --concatenate --file=$tarFile arango-$os/arango-$os.tar              
            tar --concatenate --file=$tarFile nginx-$os/nginx-$os.tar
            tar --concatenate --file=$tarFile q-server-$os/q-server-$os.tar
            tar --concatenate --file=$tarFile configs/configs.tar
            gzip -1 $tarFile
            cat $tarFile.gz | sha256sum | awk '{print $1}' > $tarFile.gz.sha256
          done

      - name: Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "./artifacts/evernode-se-*.tar.gz*"
          commit: ${{ github.sha }}
          tag: ${{ needs.prepare.outputs.release-tag }}
          token: ${{ github.token }}

  tests:
    if: github.event.label.name == 'start_tests' || github.event_name == 'push'
    needs:
      - prepare
      - publish-release
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.runner-matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Prepare envs
        uses: actions/github-script@v6.0.0
        with:
          script: |
            core.exportVariable('DEFAULT_PORTS_ARRAY', Object.values(JSON.parse(process.env.DEFAULT_PORTS)).join(','));
            var customPorts = JSON.parse(process.env.CUSTOM_PORTS);
            core.exportVariable('CUSTOM_PORTS_ARRAY', Object.values(customPorts).join(','));
            Object.keys(customPorts).forEach((name) => core.exportVariable(`CUSTOM_PORTS_${name.toUpperCase()}`, customPorts[name]));

      - name: "Use Node.js: 16.x OS: ${{matrix.os}}"
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - uses: actions/checkout@v2
        with:
          path: evernode-se

      - uses: actions/checkout@v2
        with:
          repository: ${{ env.EVER_SDK_JS_OWNER }}/${{ env.EVER_SDK_JS_REPO }}
          path: ever-sdk-js
          ref: ${{ env.EVER_SDK_JS_REF }}

      - name: Install evernode-se tools
        working-directory: evernode-se
        run: |
          npm i
          npm i -g

      - name: Install Type Script
        run: npm i -g typescript

      - name: Build ever-sdk-js/packages/core
        working-directory: ever-sdk-js/packages/core
        run: |
          npm i
          tsc

      - name: Build ever-sdk-js/packages/tests
        working-directory: ever-sdk-js/packages/tests
        run: |
          npm i
          tsc

      - name: Restore packages ever-sdk-js/packages/tests-node
        working-directory: ever-sdk-js/packages/tests-node
        run: npm i

      - name: Run TON OS SE
        run: evernode-se start

      - name: Ensure that ports are opened
        uses: nrukavkov/open-ports-check-action@v1
        with:
          port: ${{ env.DEFAULT_PORTS_ARRAY }}
          needFail: "true"

      - name: Run tests
        working-directory: ever-sdk-js/packages/tests-node
        env:
          USE_NODE_SE: true
          TON_NETWORK_ADDRESS: http://localhost:${{ fromJson(env.DEFAULT_PORTS).nginx }}
        run: node --max_old_space_size=16384 run

      - name: Stop TON OS SE
        run: evernode-se stop

      - name: Ensure that ports are closed
        uses: nrukavkov/open-ports-check-action@v1
        with:
          port: ${{ env.DEFAULT_PORTS_ARRAY }}
          needFail: "true"
          reverse: "true"

      - name: Change default ports
        run: |
          evernode-se config --nginx-port ${{ env.CUSTOM_PORTS_NGINX }} --arango-port ${{ env.CUSTOM_PORTS_ARANGO }} --ton-node-port ${{ env.CUSTOM_PORTS_NODE }} --q-server-port ${{ env.CUSTOM_PORTS_QSERVER }} --ton-node-kafka-msg-port ${{ env.CUSTOM_PORTS_REQUESTS }}

      - name: Run TON OS SE
        run: evernode-se start

      - name: Ensure that ports are opened
        uses: nrukavkov/open-ports-check-action@v1
        with:
          port: ${{ env.CUSTOM_PORTS_ARRAY }}
          needFail: "true"

      - name: Run tests
        working-directory: ever-sdk-js/packages/tests-node
        env:
          USE_NODE_SE: true
          TON_NETWORK_ADDRESS: http://localhost:${{ env.CUSTOM_PORTS_NGINX }}
        run: node --max_old_space_size=16384 run

      - name: Stop TON OS SE
        run: evernode-se stop

      - name: Ensure that ports are closed
        uses: nrukavkov/open-ports-check-action@v1
        with:
          port: ${{ env.CUSTOM_PORTS_ARRAY }}
          needFail: "true"
          reverse: "true"

  publish-npm:
    needs: [tests, prepare]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm install
      - run: |
          npm publish --access public
          npm dist-tag add ${{ needs.prepare.outputs.package-name }}@${{ needs.prepare.outputs.release-tag }} _${{ needs.prepare.outputs.evernode-se-version }}
          npm dist-tag add ${{ needs.prepare.outputs.package-name }}@${{ needs.prepare.outputs.release-tag }} _${{ needs.prepare.outputs.minor-tag }}
          npm dist-tag add ${{ needs.prepare.outputs.package-name }}@${{ needs.prepare.outputs.release-tag }} _${{ needs.prepare.outputs.major-tag }}          
          npm dist-tag add ${{ needs.prepare.outputs.package-name }}@${{ needs.prepare.outputs.release-tag }} latest
